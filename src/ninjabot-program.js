// generated from misc/ninjabot.js by misc/build.sh -- do not edit manually
export default '#!/usr/bin/env node\n' +
  `'use strict';const f=require("child_process"),h=console.error.bind(console),k=process.stdin,l=Buffer.from("ninja: no work to do","utf8");k.setRawMode&&k.setRawMode(!0);k.resume();k.on("end",function(){process.exit(0)});m(k,n,p);function q(a,c,b,g){let d=(c?["-f",c]:[]).concat(b);return g?r(a,c).then(()=>t(a,d)):t(a,d)}function r(a,c){c=(c?["-f",c]:[]).concat(["-t","clean"]);return t(a,c)}\n` +
  'function t(a,c){return new Promise((b,g)=>{let d=f.spawn("ninja",c,{cwd:a,stdio:["ignore","pipe","inherit"]}),e=!0;d.stdout.on("data",a=>{-1!=a.indexOf(l)&&(e=!1);process.stderr.write(a)});d.on("error",b=>{"ENOENT"==b.code&&(b={message:`${a} is not a directory`,code:"ENOENT"});g(b);h("ninja: error:",b)});d.on("exit",a=>{0==a?b(e):g("ninja error")})})}function u(a,c){c.then(b=>{v({response:a,result:b})}).catch(b=>{v({response:a,error:b.message||String(b)})})}\n' +
  'function n(a){"build"==a.request?u(a.rid,q(a.dir,a.ninjafile,a.targets,a.clean)):"clean"==a.request?u(a.rid,r(a.dir,a.ninjafile)):v({response:a.rid,error:`invalid ninjabot command: ${a.request}`})}function v(a){process.stdout.write(JSON.stringify(a)+"\\n")}function m(a,c,b){w(a,a=>{let d;try{d=JSON.parse(a)}catch(e){return b("invalid data",{line:a})}c(d)})}\n' +
  'function w(a,c){let b=[];a.on("end",()=>{b=[]});a.on("data",a=>{var d=a.indexOf(10);if(-1==d)b.push(a);else{for(var e=0;-1<d;)e=a.subarray(e,d),0<b.length&&(b.push(e),e=Buffer.concat(b),b=[]),c(e.toString("utf8")),e=d+1,d=a.indexOf(10,e);d<a.length-1&&b.push(a.subarray(e))}})}function p(a){h(a);process.exit(1)};\n';
