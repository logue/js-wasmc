// generated from misc/ninjabot.js by misc/build.sh -- do not edit manually
export default '#!/usr/bin/env node --input-type=module\n' +
  'const {spawn:h}=require("child_process"),k=console.error.bind(console),l=process.stdin,m=Buffer.from("ninja: no work to do","utf8");l.setRawMode&&l.setRawMode(!0);l.resume();l.on("end",()=>{process.exit(0)});n(l,p,q);async function r(a,c,b,d){b=(c?["-f",c]:[]).concat(b);return d?(await t(a,c),await u(a,b)):u(a,b)}function t(a,c){c=(c?["-f",c]:[]).concat(["-t","clean"]);return u(a,c)}\n' +
  'function u(a,c){return new Promise((b,d)=>{let e=h("ninja",c,{cwd:a,stdio:["ignore","pipe","inherit"]}),f=!0;e.stdout.on("data",g=>{-1!=g.indexOf(m)&&(f=!1);process.stderr.write(g)});e.on("error",g=>{"ENOENT"==g.code&&(g={message:`${a} is not a directory`,code:"ENOENT"});d(g);k("ninja: error:",g)});e.on("exit",g=>{0==g?b(f):d("ninja error")})})}function v(a,c){c.then(b=>{w({response:a,result:b})}).catch(b=>{w({response:a,error:b.message||String(b)})})}\n' +
  'function p(a){"build"==a.request?v(a.rid,r(a.dir,a.ninjafile,a.targets,a.clean)):"clean"==a.request?v(a.rid,t(a.dir,a.ninjafile)):w({response:a.rid,error:`invalid ninjabot command: ${a.request}`})}function w(a){process.stdout.write(JSON.stringify(a)+"\\n")}function n(a,c,b){x(a,d=>{let e;try{e=JSON.parse(d)}catch(f){return b("invalid data",{line:d})}c(e)})}\n' +
  'function x(a,c){let b=[];a.on("end",()=>{b=[]});a.on("data",d=>{var e=d.indexOf(10);if(-1==e)b.push(d);else{for(var f=0;-1<e;)f=d.subarray(f,e),0<b.length&&(b.push(f),f=Buffer.concat(b),b=[]),c(f.toString("utf8")),f=e+1,e=d.indexOf(10,f);e<d.length-1&&b.push(d.subarray(f))}})}function q(a){k(a);process.exit(1)};\n';
